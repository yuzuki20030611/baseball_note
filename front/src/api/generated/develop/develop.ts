// /**
//  * Generated by orval v7.1.0 üç∫
//  * Do not edit manually.
//  * aiUnit
//  * Apps link<br>/docs<br><a href='/admin/docs'>/admin/docs</a>
//  * OpenAPI spec version: 0.0.1
//  */
// import useSwr from 'swr'
// import type { Key, SWRConfiguration } from 'swr'
// import type { RequestInfoResponse } from '../../model'
// import { nextFetch } from '../../nextFetch'
// import type { ErrorType } from '../../nextFetch'

// type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

// /**
//  * @summary Exec Error
//  */
// export const execErrorDevelopErrorGet = (options?: SecondParameter<typeof nextFetch>) => {
//   return nextFetch<unknown>({ url: `/develop/error`, method: 'GET' }, options)
// }

// export const getExecErrorDevelopErrorGetKey = () => [`/develop/error`] as const

// export type ExecErrorDevelopErrorGetQueryResult = NonNullable<Awaited<ReturnType<typeof execErrorDevelopErrorGet>>>
// export type ExecErrorDevelopErrorGetQueryError = ErrorType<unknown>

// /**
//  * @summary Exec Error
//  */
// export const useExecErrorDevelopErrorGet = <TError = ErrorType<unknown>>(options?: {
//   swr?: SWRConfiguration<Awaited<ReturnType<typeof execErrorDevelopErrorGet>>, TError> & {
//     swrKey?: Key
//     enabled?: boolean
//   }
//   request?: SecondParameter<typeof nextFetch>
// }) => {
//   const { swr: swrOptions, request: requestOptions } = options ?? {}

//   const isEnabled = swrOptions?.enabled !== false
//   const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getExecErrorDevelopErrorGetKey() : null))
//   const swrFn = () => execErrorDevelopErrorGet(requestOptions)

//   const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

//   return {
//     swrKey,
//     ...query,
//   }
// }
// /**
//  * @summary Exec Error2
//  */
// export const execError2DevelopError2Get = (options?: SecondParameter<typeof nextFetch>) => {
//   return nextFetch<unknown>({ url: `/develop/error2`, method: 'GET' }, options)
// }

// export const getExecError2DevelopError2GetKey = () => [`/develop/error2`] as const

// export type ExecError2DevelopError2GetQueryResult = NonNullable<Awaited<ReturnType<typeof execError2DevelopError2Get>>>
// export type ExecError2DevelopError2GetQueryError = ErrorType<unknown>

// /**
//  * @summary Exec Error2
//  */
// export const useExecError2DevelopError2Get = <TError = ErrorType<unknown>>(options?: {
//   swr?: SWRConfiguration<Awaited<ReturnType<typeof execError2DevelopError2Get>>, TError> & {
//     swrKey?: Key
//     enabled?: boolean
//   }
//   request?: SecondParameter<typeof nextFetch>
// }) => {
//   const { swr: swrOptions, request: requestOptions } = options ?? {}

//   const isEnabled = swrOptions?.enabled !== false
//   const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getExecError2DevelopError2GetKey() : null))
//   const swrFn = () => execError2DevelopError2Get(requestOptions)

//   const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

//   return {
//     swrKey,
//     ...query,
//   }
// }
// /**
//  * @summary Get Request Info
//  */
// export const getRequestInfoDevelopRequestInfoGet = (options?: SecondParameter<typeof nextFetch>) => {
//   return nextFetch<RequestInfoResponse>({ url: `/develop/request-info`, method: 'GET' }, options)
// }

// export const getGetRequestInfoDevelopRequestInfoGetKey = () => [`/develop/request-info`] as const

// export type GetRequestInfoDevelopRequestInfoGetQueryResult = NonNullable<
//   Awaited<ReturnType<typeof getRequestInfoDevelopRequestInfoGet>>
// >
// export type GetRequestInfoDevelopRequestInfoGetQueryError = ErrorType<unknown>

// /**
//  * @summary Get Request Info
//  */
// export const useGetRequestInfoDevelopRequestInfoGet = <TError = ErrorType<unknown>>(options?: {
//   swr?: SWRConfiguration<Awaited<ReturnType<typeof getRequestInfoDevelopRequestInfoGet>>, TError> & {
//     swrKey?: Key
//     enabled?: boolean
//   }
//   request?: SecondParameter<typeof nextFetch>
// }) => {
//   const { swr: swrOptions, request: requestOptions } = options ?? {}

//   const isEnabled = swrOptions?.enabled !== false
//   const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetRequestInfoDevelopRequestInfoGetKey() : null))
//   const swrFn = () => getRequestInfoDevelopRequestInfoGet(requestOptions)

//   const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

//   return {
//     swrKey,
//     ...query,
//   }
// }
