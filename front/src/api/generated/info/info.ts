// /**
//  * Generated by orval v7.1.0 üç∫
//  * Do not edit manually.
//  * aiUnit
//  * Apps link<br>/docs<br><a href='/admin/docs'>/admin/docs</a>
//  * OpenAPI spec version: 0.0.1
//  */
// import useSwr from 'swr'
// import type { Key, SWRConfiguration } from 'swr'
// import type { GetInfoGet200 } from '../../model'
// import { nextFetch } from '../../nextFetch'
// import type { ErrorType } from '../../nextFetch'

// type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

// /**
//  * @summary Get Info
//  */
// export const getInfoGet = (options?: SecondParameter<typeof nextFetch>) => {
//   return nextFetch<GetInfoGet200>({ url: `/`, method: 'GET' }, options)
// }

// export const getGetInfoGetKey = () => [`/`] as const

// export type GetInfoGetQueryResult = NonNullable<Awaited<ReturnType<typeof getInfoGet>>>
// export type GetInfoGetQueryError = ErrorType<unknown>

// /**
//  * @summary Get Info
//  */
// export const useGetInfoGet = <TError = ErrorType<unknown>>(options?: {
//   swr?: SWRConfiguration<Awaited<ReturnType<typeof getInfoGet>>, TError> & { swrKey?: Key; enabled?: boolean }
//   request?: SecondParameter<typeof nextFetch>
// }) => {
//   const { swr: swrOptions, request: requestOptions } = options ?? {}

//   const isEnabled = swrOptions?.enabled !== false
//   const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetInfoGetKey() : null))
//   const swrFn = () => getInfoGet(requestOptions)

//   const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

//   return {
//     swrKey,
//     ...query,
//   }
// }
